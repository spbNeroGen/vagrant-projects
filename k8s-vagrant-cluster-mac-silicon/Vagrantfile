require "yaml"
vagrant_root = File.dirname(File.expand_path(__FILE__))
settings = YAML.load_file "#{vagrant_root}/settings.yaml"

# Извлекаем IP сети и начальный IP из конфигурации YAML
IP_SECTIONS = settings["network"]["control_ip"].match(/^([0-9.]+\.)([^.]+)$/)
# Первые три октета с точкой (например, 192.168.1.)
IP_NW = IP_SECTIONS.captures[0]
# Последний октет без точки (например, 100)
IP_START = Integer(IP_SECTIONS.captures[1])
# Количество рабочих узлов из YAML
NUM_WORKER_NODES = settings["nodes"]["workers"]["count"]

# Конфигурация Vagrant начинается здесь
Vagrant.configure("2") do |config|
  # Настраиваем общую часть для всех узлов: добавление строк в /etc/hosts
  config.vm.provision "shell", env: { "IP_NW" => IP_NW, "IP_START" => IP_START, "NUM_WORKER_NODES" => NUM_WORKER_NODES }, inline: <<-SHELL
      apt-get update -y
      echo "$IP_NW$((IP_START)) controlplane" >> /etc/hosts
      for i in `seq 1 ${NUM_WORKER_NODES}`; do
        echo "$IP_NW$((IP_START+i)) node0${i}" >> /etc/hosts
      done
  SHELL

  # Указываем базовый образ для всех VM
  config.vm.box = settings["software"]["box"]

  # Проверка обновлений базового образа
  config.vm.box_check_update = false

  # Конфигурация мастера кластера
  config.vm.define "controlplane" do |controlplane|
    controlplane.vm.hostname = "controlplane" # Устанавливаем имя хоста
    controlplane.vm.network "private_network", ip: settings["network"]["control_ip"] # Назначаем статический IP из YAML
    
    # Настройка общих папок (если определены в YAML)
    if settings["shared_folders"]
      settings["shared_folders"].each do |shared_folder|
        controlplane.vm.synced_folder shared_folder["host_path"], shared_folder["vm_path"]
      end
    end

    # Ресурсы (CPU, память) для VMware Fusion
    controlplane.vm.provider "vmware_fusion" do |vb|
        vb.cpus = settings["nodes"]["control"]["cpu"]
        vb.memory = settings["nodes"]["control"]["memory"]
    end

    # Скрипты настройки
    # Общие параметры (DNS, версия Kubernetes, ОС)
    controlplane.vm.provision "shell",
      env: {
        "DNS_SERVERS" => settings["network"]["dns_servers"].join(" "),
        "ENVIRONMENT" => settings["environment"],
        "KUBERNETES_VERSION" => settings["software"]["kubernetes"],
        "KUBERNETES_VERSION_SHORT" => settings["software"]["kubernetes"][0..3],
        "OS" => settings["software"]["os"]
      },
      path: "scripts/common.sh"
      
    # Настройка Kubernetes на мастере (Calico, CIDR)
    controlplane.vm.provision "shell",
      env: {
        "CALICO_VERSION" => settings["software"]["calico"],
        "CONTROL_IP" => settings["network"]["control_ip"],
        "POD_CIDR" => settings["network"]["pod_cidr"],
        "SERVICE_CIDR" => settings["network"]["service_cidr"]
      },
      path: "scripts/controlplane.sh"
  end

  # Конфигурация рабочих узлов
  (1..NUM_WORKER_NODES).each do |i|
    config.vm.define "node0#{i}" do |node|
      node.vm.hostname = "node0#{i}" # Имя хоста узла
      node.vm.network "private_network", ip: IP_NW + "#{IP_START + i}" # Назначаем IP из диапазона
      
      # Общие папки для рабочих узлов (если есть)
      if settings["shared_folders"]
        settings["shared_folders"].each do |shared_folder|
          node.vm.synced_folder shared_folder["host_path"], shared_folder["vm_path"]
        end
      end

      # Ресурсы (CPU, память) для рабочих узлов
      node.vm.provider "vmware_fusion" do |vb|
          vb.cpus = settings["nodes"]["workers"]["cpu"]
          vb.memory = settings["nodes"]["workers"]["memory"]
      end

      # Скрипты настройки
      # Общие параметры (DNS, версия Kubernetes, ОС)
      node.vm.provision "shell",
        env: {
          "DNS_SERVERS" => settings["network"]["dns_servers"].join(" "),
          "ENVIRONMENT" => settings["environment"],
          "KUBERNETES_VERSION" => settings["software"]["kubernetes"],
          "KUBERNETES_VERSION_SHORT" => settings["software"]["kubernetes"][0..3],
          "OS" => settings["software"]["os"]
        },
        path: "scripts/common.sh"

      # Специфический скрипт для рабочих узлов
      node.vm.provision "shell", path: "scripts/node.sh"
    end
  end
end
